[{"title":"Hello World","url":"/2024/03/24/hello-world/","content":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub.\nQuick StartCreate a new post$ hexo new &quot;My New Post&quot;\n\nMore info: Writing\nRun server$ hexo server\n\nMore info: Server\nGenerate static files$ hexo generate\n\nMore info: Generating\nDeploy to remote sites$ hexo deploy\n\nMore info: Deployment\n"},{"title":"Neovis.js可视化Neo4j数据库","url":"//post/neovisjs-visualization-neo4j-database.html","content":"Neovis.js可视化Neo4j数据库Neo4j Desktop新建数据库​\n​​​\n导出数据库​\n查看文件位置\n​​\n导入数据库添加dump文件\n​\n导入数据库，这里有两个选项，①选项是新建一个DBMS并将数据导入默认数据库neo4j，②选项是导入一个已有的DBMS并新建一个数据库来导入数据，因为用neovis.js可视化的时候，我没找到指定数据库的方法，所以只能连接默认数据库，但是我又没找到切换默认数据库的方法，因此如果导入dump文件，只能选择①\n​​​\nNeo4j BrowserNeo4j Browser是Neo4j官方数据库操作工具，start DBMS之后，点击Open，默认使用Neo4j Browser打开，其实用电脑浏览器打开http://localhost:7474是一样的效果\n​\n浏览器打开的时候，登录信息如下图所示，用户名默认为neo4j，密码是创建DBMS是设置的，如果忘记密码可以点击相应的DBMS名称，然后在右侧重置\n​\n​\nCSV数据节点数据poi.csv\nid,lon,lat,address,type2,type1,name1,100.01,10.01,x,type21,type11,name12,100.02,10.02,y,type22,type12,name23,100.03,10.03,z,type23,type13,name3\n\nroads.csv\nFID,length,point1,point26,160,&quot;100.011,10.011&quot;,&quot;100.022,10.022&quot;8,10,&quot;100.022,10.022&quot;,&quot;100.033,10.033&quot;10,40,&quot;100.033,10.033&quot;,&quot;100.044,10.044&quot;\n\n关系数据poi_rel_road.csv\npoi_id,relation,fid1,located,62,located,83,located,10\n\nconnected.csv\nroad1_id,relation,road2_id6,connected,88,connected,10\n\nCypher语句相当于MySQL数据库的SQL语句\n切换数据库use database\n\n插入数据插入节点和关系数据\nCREATE (person:Person &#123; name: &#x27;Alice&#x27;, age: 30 &#125;)CREATE (friend:Person &#123; name: &#x27;Bob&#x27;, age: 40 &#125;)CREATE (person)-[:FRIEND]-&gt;(friend)\n\nPerson: 节点标签\nname: 节点属性 age: 节点属性\nFRIEND: 节点和节点之间的关系\n插入CSV数据将CSV文件放到相应DBMS的import文件夹中\n​​​\n然后在Neo4j Browser中执行以下语句\nLOAD CSV WITH HEADERS FROM &quot;file:///poi.csv&quot; AS rowCREATE (:poi &#123;id: row.id, lon: row.lon, lat: row.lat, address: row.address, type2: row.type2, type1: row.type1, name: row.name&#125;)\n\nLOAD CSV WITH HEADERS FROM &quot;file:///roads.csv&quot; AS rowCREATE (:road &#123;FID: row.FID, length: row.length, point1: row.point1, point2: row.point2&#125;)\n\nLOAD CSV WITH HEADERS FROM &#x27;file:///poi_rel_road.csv&#x27; AS rowMATCH (p:poi &#123;id: row.poi_id&#125;), (r:road &#123;FID: row.fid&#125;)CREATE (p)-[:LOCATED &#123;relation: row.relation&#125;]-&gt;(r)\n\nLOAD CSV WITH HEADERS FROM &#x27;file:///connected.csv&#x27; AS rowMATCH (r1:road &#123;FID: row.road1_id&#125;), (r2:road &#123;FID: row.road2_id&#125;)CREATE (r1)-[:CONNECTED &#123;relation: row.relation&#125;]-&gt;(r2)\n\n查询数据任意100个节点和它们之间的关系\nMATCH (n)-[r]-(m)WITH n, r, m, rand() AS randomORDER BY randomLIMIT 100RETURN n, r, m\n\nNeovis.js目录结构.├── dist│   ├── neovis.js│   └── neovis.js.map└── neovis.html\n\nneovis.html&lt;!doctype html&gt;&lt;html&gt;&lt;head&gt;    &lt;title&gt;知识图谱&lt;/title&gt;    &lt;style type=&quot;text/css&quot;&gt;        html, body &#123;            font: 16pt arial;        &#125;        #viz &#123;            width: 1500px;            height: 700px;            border: 1px solid lightgray;            font: 22pt arial;        &#125;    &lt;/style&gt;    &lt;!-- FIXME: load from dist --&gt;    &lt;script type=&quot;text/javascript&quot; src=&quot;./dist/neovis.js&quot;&gt;&lt;/script&gt;    &lt;!-- &lt;script src=&quot;https://unpkg.com/neovis.js@2.0.2&quot;&gt;&lt;/script&gt; --&gt;    &lt;script            src=&quot;https://code.jquery.com/jquery-3.2.1.min.js&quot;            integrity=&quot;sha256-hwg4gsxgFZhOsEEamdOYGBf13FyQuiTwlAQgxVSNgt4=&quot;            crossorigin=&quot;anonymous&quot;&gt;&lt;/script&gt;    &lt;script type=&quot;text/javascript&quot;&gt;        // define config car        // instantiate nodevis object        // draw        var viz;        function draw() &#123;            var config = &#123;                containerId: &quot;viz&quot;,                neo4j: &#123;                    // 社区版Neo4j只能使用DBMS的默认数据库，即neo4j                    serverUrl: &quot;bolt://localhost:7687&quot;,                    serverUser: &quot;neo4j&quot;,                    serverPassword: &quot;12345678&quot;                &#125;,                // 节点                labels: &#123;                    road: &#123;                        // label是需要显示在节点上的属性                        label: &quot;FID&quot;,                        // size是节点的大小，根据属性的值来决定                        size: &quot;length&quot;                    &#125;,                    poi: &#123;                        label: &quot;name&quot;,                        // group是节点的分组，根据属性的值来决定                        group: &quot;type2&quot;                    &#125;                &#125;,                // 关系                relationships: &#123;                    CONNECTED: &#123;                        label: &quot;relation&quot;                    &#125;,                    LOCATED: &#123;                        label: &quot;relation&quot;                    &#125;                &#125;,                arrows: true,                // 初始的Cypher语句，随机显示100条数据                initialCypher: &quot;MATCH (n)-[r]-(m) WITH n, r, m, rand() AS random ORDER BY random LIMIT 100 RETURN n, r, m&quot;            &#125;;            viz = new NeoVis.default(config);            viz.render();            console.log(viz);        &#125;    &lt;/script&gt;&lt;/head&gt;&lt;body onload=&quot;draw()&quot;&gt;&lt;div id=&quot;viz&quot;&gt;&lt;/div&gt;&lt;/body&gt;&lt;/html&gt;\n\n参考\n知乎：手把手教你快速入门知识图谱 - Neo4J教程\nGithub：neovis.js\nGithub：Neo4j图数据可视化 —— 之Neovis.js篇\n\n‍\n","categories":["科研"],"tags":["neo4j","neovis.js","可视化"]},{"title":"Scoop安装使用教程","url":"//post/scoop-installation-tutorial.html","content":"Scoop安装使用教程Githubhttps://github.com/ScoopInstaller/Install\n安装推荐高级安装中的自定义目录方法\n注意：无法正常访问Github需要设置代理，如果不想设置代理可以使用 Scoop-cn\n要求\nPowerShell 最新版或者 Windows PowerShell 5.1\n\nPowerShell 执行策略必须是以下之一：Unrestricted​, RemoteSigned ​或 ByPass​ 以执行安装程序。比如说：\n​Set-ExecutionPolicy -ExecutionPolicy RemoteSigned -Scope CurrentUser​\n\n\n经典安装在非管理员的PowerShell中运行此命令，以默认配置安装scoop，scoop将被安装到C:\\Users\\&lt;你的用户名&gt;\\scoop​（不推荐，因为占用C盘空间并且不利于迁移）\nirm get.scoop.sh | iex#如果你在访问GitHub时遇到网络问题，你可以使用代理，例如irm get.scoop.sh -Proxy &#x27;http://&lt;ip:port&gt;&#x27; | iex\n\n高级安装如果你想高级安装。你可以下载安装程序，然后用参数手动执行它。\nirm get.scoop.sh -outfile &#x27;install.ps1&#x27;\n\n要查看安装程序的所有可配置参数。\n.\\install.ps1 -?\n\n例如，将 scoop 安装到一个自定义目录，将 scoop 配置为将全局程序安装到一个自定义目录，以及在安装时绕过系统代理（推荐）\n​.\\install.ps1 -ScoopDir &#39;D:\\Scoop&#39; -ScoopGlobalDir &#39;D:\\GlobalScoopApps&#39; -NoProxy​\n或者你可以使用传统的方法，通过设置环境变量来配置自定义目录（不推荐）\n$env:SCOOP=&#x27;D:\\Applications\\Scoop&#x27;$env:SCOOP_GLOBAL=&#x27;F:\\GlobalScoopApps&#x27;[Environment]::SetEnvironmentVariable(&#x27;SCOOP_GLOBAL&#x27;, $env:SCOOP_GLOBAL, &#x27;Machine&#x27;)irm get.scoop.sh | iex\n\n对于管理员出于安全考虑，在管理员控制台下的安装已被默认禁用。如果你知道自己在做什么并想以管理员身份安装Scoop。请下载安装程序，并在高位控制台中用-RunAsAdmin​参数手动执行它。下面是例子：\nirm get.scoop.sh -outfile &#x27;install.ps1&#x27;.\\install.ps1 -RunAsAdmin [-OtherParameters ...]#我不关心其他参数，只想要一个单行命令iex &quot;&amp; &#123;$(irm get.scoop.sh)&#125; -RunAsAdmin&quot;\n\n静默安装你可以将所有的输出重定向到Out-Null或一个日志文件，使安装程序保持沉默。你可以使用$LASTEXITCODE​来检查安装结果，当安装成功时它将是0。\n#省略输出.\\install.ps1 [-Parameters ...] | Out-Null#或者收集日志.\\install.ps1 [-Parameters ...] &gt; install.log#获取结果$LASTEXITCODE\n\n使用技巧设置代理# 设置Scoop访问Github的代理为v2rayN的http代理scoop config proxy 127.0.0.1:10809# 查看Scoop配置信息scoop config\n\n添加别名scoop有些命令需要经常使用，比如scoop install、scoop list、scoop uninstall、scoop update等，用多了就会感觉输入的字符太多，所以可以通过设置别名的方式来减少字符输入数量。\n打开Power Shell，必须使用Power Shell，使用cmd会导致别名设置不全的错误，按需选择以下命令执行：\n# Install appscoop alias add i &#x27;scoop install $args[0]&#x27; &#x27;Install app&#x27;scoop alias add add &#x27;scoop install $args[0]&#x27; &#x27;Install app&#x27;# Uninstall appscoop alias add rm &#x27;scoop uninstall $args[0]&#x27; &#x27;Uninstall an app&#x27;scoop alias add remove &#x27;scoop uninstall $args[0]&#x27; &#x27;Uninstall an app&#x27;# List appsscoop alias add ls &#x27;scoop list&#x27; &#x27;List installed apps&#x27;# Updatescoop alias add u &#x27;scoop update $args[0]&#x27; &#x27;Update apps, or Scoop itself&#x27;scoop alias add upgrade &#x27;scoop update $args[0]&#x27; &#x27;Update apps, or Scoop itself&#x27;# Show Statusscoop alias add ss &#x27;scoop status&#x27; &#x27;Show status and check for new app versions&#x27;# Search appscoop alias add s &#x27;scoop search $args[0]&#x27; &#x27;Search app&#x27;\n\n参考自Github Gist: idleberg&#x2F;scoop.md\n快捷键为了方便更新软件，将以下内容复制到空白文本文档，并重命名为s.bat​：\nscoop update &amp;&amp; scoop status\n\n将此文件移动到系统盘的用户根目录（如C:\\Users\\username​），下次启动cmd​就可以直接输入s​并回车，获取软件更新信息，再输入scoop update *​（如果已经设置别名则输入scoop u *​）就可以更新所有软件。\n自建Bucket新建仓库打开 https://github.com/ScoopInstaller/BucketTemplate，点右上角 Use this template，选择 Create a new repository\n​​\n在打开的页面填写 Repository name，点 Create repository from template\n修改权限创建自己的仓库后，打开 Settings -&gt; Actions -&gt; General，将 Workflow permissions 修改为 Read and write permissions\n​​\n​​\n开启Actions参考以下步骤开启 Github Actions 里的 Tests ：\n​​\n​​\n确保 Github Actions 里的 Tests  已开启，然后就可以向自己仓库的 bucket  文件夹中添加 app manifest 的 json 文件了。\n参考链接\n如何处理 Github Action 报出的 remote: Permission to xx x denied to github-actions[bot] 问题\nScoop 进阶 - 建立自己的Bucket\nScoop 进阶教程\n\n‍\n","categories":["Windows"],"tags":["教程","Scoop","Windows"]},{"title":"使用Git上传代码到Github","url":"//post/upload-code-with-git-to-github-z5p54c.html","content":"使用Git上传代码到Github安装Git安装Git官网Windows版本：https://git-scm.com/download/win\n[安装​Scoop​会自动安装Git]\n开始菜单打开Git bash​或在文件资源管理器某个文件夹里右键-Git bash here​打开Git命令行，执行git --version​查看Git版本\ngit --versiongit version 2.42.0.windows.2\n\n代理(可选)如果无法正常访问Github，可以设置全局代理，以v2rayN的socks5代理为例：\n​Git bash​输入以下命令代理Github的https访问，更多相关内容参考：https://gist.github.com/laispace/666dd7b27e9116faece6\ngit config --global http.https://github.com.proxy socks5://127.0.0.1:10808\n\n取消全局代理\ngit config --global --unset http.https://github.com.proxygit config --global --unset https.https://github.com.proxy\n\n配置账户配置Github用户名和邮箱打开Git bash，输入git config --global user.name &quot;YOUR_USERNAME&quot;​(引号内替换为Github用户名)设置用户名，输入git config --global user.email &quot;YOUR_EMAIL&quot;​(引号内替换为Github邮箱)\n连接Github创建SSH Key打开CMD输入以下命令创建SSH Key​，-t​指定加密算法，-C​指定备注，-f​指定公钥和私钥文件存放在C:\\Users\\YOUR_COMPUTER_USERNAME\\.ssh​目录下\nssh-keygen -t rsa -C &quot;YOUR_EMAIL&quot; -f &quot;.ssh/github_id_rsa&quot;\n\n输入命令回车三次即可创建完成，进入对应目录，已经生成私钥github_id_rsa和公钥github_id_rsa.pub\n配置Github公钥用记事本打开github_id_rsa.pub并复制里面的所有内容\n打开Github网站，进入Setting​-SSH and GPG keys​，点New SSH key​新建SSH key\n​​\n按照下图中步骤填写公钥\n​​\n打开Git bash​，输入ssh -T git@github.com​回车，如果出现Are you sure you want to continue connecting (yes&#x2F;no)? 则输入yes回车\n出现欢迎语*You’ve successfully authenticated, but GitHub does not provide shell access. * 说明连接Github成功\n如果出现&#103;&#105;&#x74;&#64;&#103;&#x69;&#116;&#x68;&#x75;&#98;&#46;&#x63;&#x6f;&#x6d;: Permission denied (publickey). 则说明访问拒绝，需要进行下面的步骤\n配置SSH如果访问拒绝，进行此步骤\n打开C:\\Users\\YOUR_COMPUTER_USERNAME\\.ssh​目录，用记事本打开config文件(没有后缀名)，如果不存在就新建一个，输入以下内容保存\nHost github.com  IdentityFile ~/.ssh/github_id_rsa\n\n此时打开Git bash​输入ssh -T git@github.com​回车，应该就会出现欢迎语了，连接Github成功\n上传代码新建仓库在Github网站新建仓库，右上角加号-New repository​，Repository name​输入仓库名称，如test​，点击Create repository​创建仓库\n在某个目录下新建文件夹test并打开此文件夹，右键-Git bash here​\n# 创建README.md并写入一号标题testecho &quot;# test&quot; &gt;&gt; README.md# 初始化仓库，生成.github文件夹存放git相关信息git init# 将README.md添加进暂存区，如果想添加所有已修改文件使用&quot;git add .&quot;git add README.md# 添加本次修改的备注git commit -m &quot;first commit&quot;# 将此分支重命名为main，仅需创建时执行，因为默认分支名称是master，而现在常用maingit branch -M main# 添加远程仓库地址，别名origin，此处使用SSH连接，需保证之前SSH连接成功git remote add origin git@github.com:muxinxy/test.git# 将本地main分支代码上传到远程orgin仓库git push -u origin main\n\n上述SSH连接的好处是设置一次密钥，以后就不需要身份认证（推荐）\n如果使用HTTPS连接（不推荐），添加远程仓库的命令为git remote add origin https://github.com/muxinxy/test.git​，回车后自动弹出GitCredentialManager窗口，选择Sign in with your browser，浏览器登录后在弹窗中输入用户名和personal access token​ (不是密码)\n注意：创建personal access token时建议设置为最长有效时间，即一年，Repository access选中”All repositories”，设置Repository permissions中的Commit statuses、Contents、Workflows的权限为”Read and write”，创建成功后保存token，token只显示一次\n​​\n下载仓库SSH方式（自己仓库推荐此方式）：git clone git@github.com:USERNAME/test.git​\nHTTPS方式（自己仓库不推荐此方式，他人仓库推荐此方式）：git clone https://github.com/USERNAME/test.git​\n别名Git bash 输入以下命令使用Vim编辑器添加全局别名：\ngit config --global -e\n\n按i​进入插入模式，在配置文件中插入以下别名：\n[alias]  co = checkout  cob = checkout -b  coo = !git fetch &amp;&amp; git checkout  br = branch  brd = branch -d  st = status  aa = add -A .  unstage = reset --soft HEAD^  cm = commit -m  amend = commit --amend -m  fix = commit --fixup  undo = reset HEAD~1  rv = revert  cp = cherry-pick  pu = !git push origin `git branch --show-current`  fush = push -f  mg = merge --no-ff  rb = rebase  rbc = rebase --continue  rba = rebase --abort  rbs = rebase --skip  rom = !git fetch &amp;&amp; git rebase -i origin/master --autosquash  save = stash push  pop = stash pop  apply = stash apply  rl = reflog\n\n添加完毕按Esc​退出插入模式，输入:wq​保存并退出\n此时可以使用别名替换原来冗长的命令，例如：\n# 查看Git状态git st# 添加所有文件到暂存区git aa# 填写Commit信息git cm &quot;Update&quot;# 提交代码到远程仓库git pu\n\n其他查看配置信息# 查看系统级别的配置信息git config --system --list# 查看全局级别的配置信息git config --global --list# 查看仓库级别的配置信息git config --local --list# 查看全局配置中某个特定配置项的值，如用户名git config --global user.name\n\n如果信息过多显示不全，可以按Enter​显示下一行，每按一次多显示一行，按q​退出\n查看命令帮助# 查看全部命令帮助git help -a# 查看某个命令帮助，如addgit help add\n\n如果信息过多显示不全，可以按Enter​显示下一行，每按一次多显示一行，按q​退出\n","categories":["Windows"],"tags":["Git","Github"]},{"title":"使用PGLoader把数据从MySQL迁移到PostgreSQL","url":"//post/use-pgloader-to-migrate-data-from-mysql-to-postgresql-16xdva.html","content":"使用PGLoader把数据从MySQL迁移到PostgreSQL介绍PGLoader: Migrate to PostgreSQL in a single command! 使用一行命令迁移到 PostgreSQL ！\nPGLoader官网PGLoader官方源码\nhttps://github.com/dimitri/pgloader\nPGLoader官方文档\nhttps://pgloader.readthedocs.io/en/latest/pgloader.html\n使用方法源码编译、二进制文件、Docker，本文使用Docker\n前提已安装Docker\n下载镜像以下方法二选一\n从Github Docker仓库下载镜像docker pull ghcr.io/dimitri/pgloader:latest\n\n从国内代理下载镜像docker pull ghcr.dockerproxy.com/dimitri/pgloader:latestdocker tag ghcr.dockerproxy.com/dimitri/pgloader:latest ghcr.io/dimitri/pgloader:latestdocker rmi ghcr.dockerproxy.com/dimitri/pgloader:latest\n\n迁移数据创建临时目录方便挂载到Docker容器\nmkdir /root/tmpdircd /root/tmpdir\n\n编辑load文件vim pgload.load\n\n按i​进入插入模式，输入以下内容，替换其中的用户名、密码、数据库名称\nLOAD DATABASE FROM mysql://username:password@localhost:3306/dasebase INTO postgresql://username:password@localhost:5432/dasebase WITH include drop, create tables, create indexes, workers = 8, concurrency = 1        CAST type datetime to timestamp drop default drop not null using zero-dates-to-nullALTER SCHEMA &#x27;taas_core&#x27; RENAME TO &#x27;public&#x27;;\n\n按Esc​退出编辑模式，输入:wq​后按回车保存退出\n进行迁移docker run --network=host -v /root/tmpdir:/tmp --rm -it ghcr.io/dimitri/pgloader:latest \\pgloader  /tmp/pgload.load\n\n参考内容\nGithub https://github.com/dimitri/pgloader\n\n知乎 使用PGLoader将MySQL数据库迁移到PostgreSQL\n\nIT打杂分享 从MySQL到PostgreSQL的迁移工具\n\n\n","categories":["Linux"],"tags":["pgloader","数据迁移","MySQL","PostgreSQL"]}]